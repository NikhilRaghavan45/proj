using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using MarkAttendance.Models;
using System.Data;
using System.Data.SqlClient;

namespace MarkAttendance.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class CourseController : Controller
    {
        public IConfiguration Configuration { get; }

        public CourseController(IConfiguration configuration)
        {
            Configuration = configuration;
        }






        [HttpGet]
        [Route("GetNotes")]
        public IActionResult GetNotes()
        {
            List<Course> courseList = new List<Course>();

            string connectionString = Configuration["ConnectionStrings:DefaultConnection"];

            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                string sql = "SELECT * FROM Course";
                SqlCommand cmd = new SqlCommand(sql, connection);

                connection.Open();

                using (SqlDataReader reader = cmd.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        Course course = new Course();
                        course.CId = Convert.ToInt32(reader["CId"]);
                        course.CName = Convert.ToString(reader["CName"]);
                        course.CDuration = Convert.ToInt32(reader["CDuration"]);
                        course.StartDate = Convert.ToDateTime(reader["StartDate"]);
                        course.EndDate = Convert.ToDateTime(reader["EndDate"]);
                        course.Availability = Convert.ToString(reader["Availability"]);
                        course.CDescription = Convert.ToString(reader["CDescription"]);
                        course.CPrequisite = Convert.ToString(reader["CPrequisite"]);
                        course.OutCome = Convert.ToString(reader["OutCome"]);

                        courseList.Add(course);
                    }
                }

                connection.Close();
            }

            return Ok(courseList);
        }

        [HttpGet]
        [Route("GetModules/{courseId}")]
        public IActionResult GetModules(int courseId)
        {
            List<Module> moduleList = new List<Module>();

            string connectionString = Configuration["ConnectionStrings:DefaultConnection"];

            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                string sql = "SELECT * FROM Module WHERE CId = @CourseId";
                SqlCommand cmd = new SqlCommand(sql, connection);
                cmd.Parameters.AddWithValue("@CourseId", courseId);

                connection.Open();

                using (SqlDataReader reader = cmd.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        Module module = new Module();
                        module.MId = Convert.ToInt32(reader["MId"]);
                        module.MName = Convert.ToString(reader["MName"]);
                        module.CId = Convert.ToInt32(reader["CId"]);

                        moduleList.Add(module);
                    }
                }

                connection.Close();
            }

            return Ok(moduleList);
        }

        [HttpGet]
        [Route("GetStudents/{moduleId}/{selectedDate}")]
        public IActionResult GetStudents(int moduleId, DateTime selectedDate)
        {
            List<FeesStructure> studentList = new List<FeesStructure>();

            string connectionString = Configuration["ConnectionStrings:DefaultConnection"];

            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                string sql = @"
            SELECT F.Regid AS sid, F.SName AS sname, C.CId, C.CName, M.MId, M.MName, F.POption, F.ICount, F.APay, F.PAmount, F.PType 
            FROM FeesStructure F
            JOIN Course C ON F.CId = C.CId
            JOIN Module M ON C.CId = M.CId
            WHERE M.MId = @ModuleId AND @SelectedDate BETWEEN C.StartDate AND C.EndDate
        ";

                SqlCommand cmd = new SqlCommand(sql, connection);
                cmd.Parameters.AddWithValue("@ModuleId", moduleId);
                cmd.Parameters.AddWithValue("@SelectedDate", selectedDate.ToString("yyyy-MM-dd"));

                connection.Open();

                using (SqlDataReader reader = cmd.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        FeesStructure student = new FeesStructure();
                        student.Regid = Convert.ToInt32(reader["sid"]);
                        student.SName = Convert.ToString(reader["sname"]);
                        student.CId = Convert.ToInt32(reader["CId"]);
                        student.CName = Convert.ToString(reader["CName"]);
                        student.POption = Convert.ToString(reader["POption"]);
                        student.ICount = Convert.ToInt32(reader["ICount"]);
                        student.APay = Convert.ToInt64(reader["APay"]);
                        student.PAmount = Convert.ToInt64(reader["PAmount"]);
                        student.PType = Convert.ToString(reader["PType"]);

                        studentList.Add(student);
                    }
                }

                connection.Close();
            }

            return Ok(studentList);
        }





        //[HttpGet]
        //[Route("GetStudents/{moduleId}/{selectedDate}")]
        //public IActionResult GetStudents(int moduleId, DateTime selectedDate)
        //{
        //    List<FeesStructure> studentList = new List<FeesStructure>();

        //    string connectionString = Configuration["ConnectionStrings:DefaultConnection"];

        //    using (SqlConnection connection = new SqlConnection(connectionString))
        //    {
        //        string sql = @"
        //            SELECT F.Regid AS sid, F.SName AS sname, C.CId, C.CName, M.MId, M.MName, F.POption, F.ICount, F.APay, F.PAmount, F.PType 
        //            FROM FeesStructure F
        //            JOIN Course C ON F.CId = C.CId
        //            JOIN Module M ON C.CId = M.CId
        //            WHERE M.MId = @ModuleId AND @SelectedDate BETWEEN C.StartDate AND C.EndDate
        //        ";

        //        SqlCommand cmd = new SqlCommand(sql, connection);
        //        cmd.Parameters.AddWithValue("@ModuleId", moduleId);
        //        cmd.Parameters.AddWithValue("@SelectedDate", selectedDate.ToString("yyyy-MM-dd"));

        //        connection.Open();

        //        using (SqlDataReader reader = cmd.ExecuteReader())
        //        {
        //            while (reader.Read())
        //            {
        //                FeesStructure student = new FeesStructure();
        //                student.Regid = Convert.ToInt32(reader["sid"]);
        //                student.SName = Convert.ToString(reader["sname"]);
        //                student.CId = Convert.ToInt32(reader["CId"]);
        //                student.CName = Convert.ToString(reader["CName"]);
        //                student.POption = Convert.ToString(reader["POption"]);
        //                student.ICount = Convert.ToInt32(reader["ICount"]);
        //                student.APay = Convert.ToInt64(reader["APay"]);
        //                student.PAmount = Convert.ToInt64(reader["PAmount"]);
        //                student.PType = Convert.ToString(reader["PType"]);

        //                studentList.Add(student);
        //            }
        //        }

        //        connection.Close();
        //    }

        //    return Ok(studentList);
        //}


        //        [HttpGet]
        //        [Route("GetStudents/{moduleId}/{selectedDate}")]
        //        public IActionResult GetStudents(int moduleId, DateTime selectedDate)
        //        {
        //            List<FeesStructure> studentList = new List<FeesStructure>();

        //            string connectionString = Configuration["ConnectionStrings:DefaultConnection"];

        //            using (SqlConnection connection = new SqlConnection(connectionString))
        //            {
        //                string sql = @"
        //    SELECT F.Regid AS sid, F.SName AS sname, C.CId, C.CName, M.MId, M.MName, F.POption, F.ICount, F.APay, F.PAmount, F.PType 
        //    FROM FeesStructure F
        //    JOIN Course C ON F.CId = C.CId
        //    JOIN Module M ON C.CId = M.CId
        //    WHERE M.MId = @ModuleId AND @SelectedDate BETWEEN C.StartDate AND C.EndDate
        //";


        //                SqlCommand cmd = new SqlCommand(sql, connection);
        //                cmd.Parameters.AddWithValue("@ModuleId", moduleId);
        //                cmd.Parameters.AddWithValue("@SelectedDate", selectedDate.ToString("yyyy-MM-dd"));


        //                connection.Open();

        //                using (SqlDataReader reader = cmd.ExecuteReader())
        //                {
        //                    while (reader.Read())
        //                    {
        //                        FeesStructure student = new FeesStructure();
        //                        student.Regid = Convert.ToInt32(reader["sid"]);
        //                        student.SName = Convert.ToString(reader["sname"]);
        //                        student.CId = Convert.ToInt32(reader["CId"]);
        //                        student.CName = Convert.ToString(reader["CName"]);
        //                        student.POption = Convert.ToString(reader["POption"]);
        //                        student.ICount = Convert.ToInt32(reader["ICount"]);
        //                        student.APay = Convert.ToInt64(reader["APay"]);
        //                        student.PAmount = Convert.ToInt64(reader["PAmount"]);
        //                        student.PType = Convert.ToString(reader["PType"]);

        //                        studentList.Add(student);
        //                    }
        //                }

        //                connection.Close();
        //            }

        //            return Ok(studentList);
        //        }
        [HttpGet]
        [Route("GetCourseDates/{courseId}")]
        public IActionResult GetCourseDates(int courseId)
        {
            string connectionString = Configuration["ConnectionStrings:DefaultConnection"];
            DateTime startDate = DateTime.MinValue;
            DateTime endDate = DateTime.MinValue;

            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                string sql = "SELECT StartDate, EndDate FROM Course WHERE CId = @CourseId";
                SqlCommand cmd = new SqlCommand(sql, connection);
                cmd.Parameters.AddWithValue("@CourseId", courseId);

                connection.Open();

                using (SqlDataReader reader = cmd.ExecuteReader())
                {
                    if (reader.Read())
                    {
                        startDate = Convert.ToDateTime(reader["StartDate"]);
                        endDate = Convert.ToDateTime(reader["EndDate"]);
                    }
                }

                connection.Close();
            }

            return Ok(new { StartDate = startDate, EndDate = endDate });
        }

        [HttpGet]
        [Route("GetAttendance/{courseId}/{selectedDate}")]
        public IActionResult GetAttendance(int courseId, DateTime selectedDate)
        {
            List<Attendances> attendanceList = new List<Attendances>();

            string connectionString = Configuration["ConnectionStrings:DefaultConnection"];

            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                string sql = "SELECT * FROM Attendances";
                SqlCommand cmd = new SqlCommand(sql, connection);


                connection.Open();

                using (SqlDataReader reader = cmd.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        Attendances attendance = new Attendances();
                        attendance.Att_id = Convert.ToInt32(reader["Att_id"]);
                        attendance.SId = Convert.ToInt32(reader["SId"]);
                        attendance.SName = Convert.ToString(reader["SName"]);
                        attendance.Date = Convert.ToDateTime(reader["Date"]);
                        attendance.CName = Convert.ToString(reader["CName"]);
                        attendance.Attendance = Convert.ToChar(reader["Attendance"]);

                        attendanceList.Add(attendance);
                    }
                }

                connection.Close();
            }

            return Ok(attendanceList);
        }
        [HttpGet]
        [Route("GetAttendanceDetails/{courseName}/{selectedDate}")]
        public IActionResult GetAttendanceDetails(string courseName, string selectedDate)
        {
            List<Attendances> attendanceDetailsList = new List<Attendances>();

            string connectionString = Configuration["ConnectionStrings:DefaultConnection"];

            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                string sql = @"
            SELECT Att_id, SId, SName, Date, CName, Attendance
            FROM Attendances
            WHERE CName = @CourseName
            AND CONVERT(DATE, Date, 23) = CONVERT(DATE, @SelectedDate, 23)
        ";

                SqlCommand cmd = new SqlCommand(sql, connection);
                cmd.Parameters.AddWithValue("@CourseName", courseName);
                cmd.Parameters.AddWithValue("@SelectedDate", selectedDate);

                connection.Open();

                using (SqlDataReader reader = cmd.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        Attendances attendanceDetails = new Attendances();
                        attendanceDetails.Att_id = Convert.ToInt32(reader["Att_id"]);
                        attendanceDetails.SId = Convert.ToInt32(reader["SId"]);
                        attendanceDetails.SName = Convert.ToString(reader["SName"]);
                        attendanceDetails.Date = Convert.ToDateTime(reader["Date"]);
                        attendanceDetails.CName = Convert.ToString(reader["CName"]);
                        attendanceDetails.Attendance = Convert.ToChar(reader["Attendance"]);

                        attendanceDetailsList.Add(attendanceDetails);
                    }
                }

                connection.Close();
            }

            return Ok(attendanceDetailsList);
        }


        [HttpPost]
        [Route("SaveAttendance")]
        public IActionResult SaveAttendance([FromBody] List<Attendances> attendanceList)
        {
            if (attendanceList == null || attendanceList.Count == 0)
            {
                return BadRequest("Attendance data is empty.");
            }

            try
            {
                string connectionString = Configuration["ConnectionStrings:DefaultConnection"];

                using (SqlConnection connection = new SqlConnection(connectionString))
                {
                    connection.Open();

                    foreach (var attendance in attendanceList)
                    {
                        string checkExistingSql = "SELECT COUNT(*) FROM Attendances WHERE SId = @SId AND Date = @Date";
                        SqlCommand checkExistingCmd = new SqlCommand(checkExistingSql, connection);
                        checkExistingCmd.Parameters.AddWithValue("@SId", attendance.SId);
                        checkExistingCmd.Parameters.AddWithValue("@Date", attendance.Date);

                        int existingRecordsCount = (int)checkExistingCmd.ExecuteScalar();

                        if (existingRecordsCount > 0)
                        {
                            continue;
                        }

                        string insertSql = @"
                    INSERT INTO Attendances (SId, SName, Date, Attendance, CName)
                    VALUES (@SId, @SName, @Date, @Attendance, @CName)
                ";

                        SqlCommand cmd = new SqlCommand(insertSql, connection);
                        cmd.Parameters.AddWithValue("@SId", attendance.SId);
                        cmd.Parameters.AddWithValue("@SName", attendance.SName);
                        cmd.Parameters.AddWithValue("@Date", attendance.Date);
                        cmd.Parameters.AddWithValue("@Attendance", attendance.Attendance);
                        cmd.Parameters.AddWithValue("@CName", attendance.CName);

                        cmd.ExecuteNonQuery();
                    }

                    connection.Close();
                }

                return Ok("Attendance saved successfully.");
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"Internal Server Error: {ex.Message}");
            }
        }




    }
}